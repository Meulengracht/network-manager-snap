From 6325361b73de14817e3d0835b9190c4eeecef472 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lukas=20M=C3=A4rdian?= <lukas.maerdian@canonical.com>
Date: Tue, 2 Feb 2021 15:52:05 +0100
Subject: [PATCH] netplan: make use of libnetplan for YAML backend

---
 Makefile.am                                   |   5 +-
 meson.build                                   |   3 +
 src/meson.build                               |   2 +
 .../plugins/keyfile/nms-keyfile-plugin.c      |  19 +++
 .../plugins/keyfile/nms-keyfile-utils.c       |  41 ++++++
 .../plugins/keyfile/nms-keyfile-utils.h       |   2 +
 .../plugins/keyfile/nms-keyfile-writer.c      | 124 ++++++++++++++----
 .../keyfile/tests/test-keyfile-settings.c     |  45 +++++--
 8 files changed, 203 insertions(+), 38 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index b37aa4e712311cb23a675af70ec1287fcd3d63f5..2e4e146412de6102068bb953c38cb8091e7f010a 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -2045,7 +2045,8 @@ EXTRA_DIST += \
 
 ###############################################################################
 
-src_libNetworkManager_la_CPPFLAGS = $(src_cppflags)
+src_libNetworkManager_la_CPPFLAGS = $(src_cppflags) \
+	$(UUID_CFLAGS)
 
 src_libNetworkManager_la_SOURCES = \
 	\
@@ -2252,6 +2253,8 @@ src_libNetworkManager_la_LIBADD = \
 	$(LIBAUDIT_LIBS) \
 	$(LIBPSL_LIBS) \
 	$(LIBCURL_LIBS) \
+	$(UUID_LIBS) \
+	-lnetplan \
 	$(NULL)
 
 $(src_libNetworkManager_la_OBJECTS): $(libnm_core_lib_h_pub_mkenums)
diff --git a/meson.build b/meson.build
index 5bd55e6a0884b52a69d7295b3e0d2bbf5f8ae1fe..98f7dc9c77198804f4c6782b2e53e86de988a12a 100644
--- a/meson.build
+++ b/meson.build
@@ -264,6 +264,9 @@ config_h.set10('HAVE_LIBSYSTEMD', libsystemd_dep.found())
 systemd_dep = dependency('systemd', required: false)
 have_systemd_200 = systemd_dep.found() and systemd_dep.version().version_compare('>= 200')
 
+libnetplan_dep = dependency('libnetplan', version: '>= 0', required: true)
+libuuid_dep = dependency('libuuid', version: '=> 1', required: true)
+
 gio_unix_dep = dependency('gio-unix-2.0', version: '>= 2.40')
 
 glib_dep = declare_dependency(
diff --git a/src/meson.build b/src/meson.build
index 748fa519bc56305bfe485b9ea1207942fe5b5874..398efb3c69c37bd1d6214602d194dfade5ae1d1a 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -54,6 +54,8 @@ deps = [
   libnm_udev_aux_dep,
   libsystemd_dep,
   libudev_dep,
+  libuuid_dep,
+  libnetplan_dep,
 ]
 
 if enable_wext
diff --git a/src/settings/plugins/keyfile/nms-keyfile-plugin.c b/src/settings/plugins/keyfile/nms-keyfile-plugin.c
index fdb88d2a6d6218460fe191d7bc5be08b492886f5..548eda536354c9aa3a305540038bf4a03be8fcb6 100644
--- a/src/settings/plugins/keyfile/nms-keyfile-plugin.c
+++ b/src/settings/plugins/keyfile/nms-keyfile-plugin.c
@@ -12,6 +12,7 @@
 #include <unistd.h>
 #include <sys/types.h>
 #include <sys/time.h>
+#include <netplan/util.h>
 
 #include "nm-std-aux/c-list-util.h"
 #include "nm-glib-aux/nm-c-list.h"
@@ -292,6 +293,10 @@ _load_file (NMSKeyfilePlugin *self,
 	gs_free char *full_filename = NULL;
 	struct stat st;
 
+	// Handle all netplan generated connections via STORAGE_TYPE_ETC, as they live in /etc/netplan
+	if (g_str_has_prefix(filename, "netplan-"))
+		storage_type = NMS_KEYFILE_STORAGE_TYPE_ETC;
+
 	if (_ignore_filename (storage_type, filename)) {
 		gs_free char *nmmeta = NULL;
 		gs_free char *loaded_path = NULL;
@@ -556,6 +561,8 @@ reload_connections (NMSettingsPlugin *plugin,
 	nm_auto_clear_sett_util_storages NMSettUtilStorages storages_new = NM_SETT_UTIL_STORAGES_INIT (storages_new, nms_keyfile_storage_destroy);
 	int i;
 
+	netplan_generate(NULL);
+	_fix_netplan_interface_name(NULL);
 	_load_dir (self, NMS_KEYFILE_STORAGE_TYPE_RUN, priv->dirname_run, &storages_new);
 	if (priv->dirname_etc)
 		_load_dir (self, NMS_KEYFILE_STORAGE_TYPE_ETC, priv->dirname_etc, &storages_new);
@@ -987,6 +994,13 @@ delete_connection (NMSettingsPlugin *plugin,
 	previous_filename = nms_keyfile_storage_get_filename (storage);
 	uuid = nms_keyfile_storage_get_uuid (storage);
 
+	gs_unref_keyfile GKeyFile *key_file = NULL;
+	key_file = g_key_file_new ();
+	if (!g_key_file_load_from_file (key_file, previous_filename, G_KEY_FILE_NONE, error))
+		return FALSE;
+	g_autofree gchar* ssid = NULL;
+	ssid = g_key_file_get_string(key_file, "wifi", "ssid", NULL);
+
 	if (!NM_IN_SET (storage->storage_type, NMS_KEYFILE_STORAGE_TYPE_ETC,
 	                                       NMS_KEYFILE_STORAGE_TYPE_RUN)) {
 		nm_utils_error_set (error,
@@ -1011,6 +1025,11 @@ delete_connection (NMSettingsPlugin *plugin,
 	} else
 		operation_message = "deleted from disk";
 
+	g_autofree gchar* netplan_id = netplan_get_id_from_nm_filename(previous_filename, ssid);
+	netplan_delete_connection(netplan_id, NULL);
+	netplan_generate(NULL);
+	_fix_netplan_interface_name(NULL);
+
 	_LOGT ("commit: deleted \"%s\", %s %s (%s%s%s%s)",
 	       previous_filename,
 	       storage->is_meta_data ? "meta-data" : "profile",
diff --git a/src/settings/plugins/keyfile/nms-keyfile-utils.c b/src/settings/plugins/keyfile/nms-keyfile-utils.c
index f03c601a56a6548c947f1b7cc6d4cd6b441e5b1d..f58dd4262b1125fc6669ba6033bce311908d0a22 100644
--- a/src/settings/plugins/keyfile/nms-keyfile-utils.c
+++ b/src/settings/plugins/keyfile/nms-keyfile-utils.c
@@ -9,6 +9,7 @@
 
 #include <stdlib.h>
 #include <sys/stat.h>
+#include <glob.h>
 
 #include "nm-glib-aux/nm-io-utils.h"
 #include "nm-keyfile-internal.h"
@@ -27,6 +28,46 @@
 
 /*****************************************************************************/
 
+gboolean
+_fix_netplan_interface_name(const char* rootdir)
+{
+	/* This quirk can be removed, once https://pad.lv/1927350 is resolved */
+	glob_t gl;
+	mode_t orig_umask;
+	int rc;
+	g_autofree char* path = NULL;
+	path = g_build_path(G_DIR_SEPARATOR_S, rootdir ?: "/", "run",
+	                    "NetworkManager", "system-connections", NULL);
+	g_autofree char* rglob = g_strjoin(NULL, path, G_DIR_SEPARATOR_S,
+	                                   "*.nmconnection", NULL);
+	rc = glob(rglob, GLOB_BRACE, NULL, &gl);
+	if (rc != 0 && rc != GLOB_NOMATCH) {
+		g_warning ("failed to glob for %s: %m", rglob);
+		return FALSE;
+	}
+
+	for (size_t i = 0; i < gl.gl_pathc; ++i) {
+		GKeyFile *kf = g_key_file_new ();
+		g_key_file_load_from_file (kf, gl.gl_pathv[i], G_KEY_FILE_KEEP_COMMENTS, NULL);
+		gchar *iface = NULL;
+		iface = g_key_file_get_string (kf, "connection", "interface-name", NULL);
+		if (iface && g_str_has_prefix (iface, "NM-") && strlen (iface) > 15) {
+			g_key_file_remove_key (kf, "connection", "interface-name", NULL);
+			orig_umask = umask(077);
+			if (!g_key_file_save_to_file (kf, gl.gl_pathv[i], NULL)) {
+				g_warning ("failed to write updated keyfile %s", gl.gl_pathv[i]);
+				return FALSE;
+			}
+			g_info("netplan: deleted invalid connection.interface-name=%s in %s",
+			       iface, gl.gl_pathv[i]);
+			umask(orig_umask);
+		}
+		g_free (iface);
+		g_key_file_free (kf);
+	}
+	return TRUE;
+}
+
 const char *
 nms_keyfile_nmmeta_check_filename (const char *filename,
                                    guint *out_uuid_len)
diff --git a/src/settings/plugins/keyfile/nms-keyfile-utils.h b/src/settings/plugins/keyfile/nms-keyfile-utils.h
index f943d65ca6834efd2bc243397d122243d906712e..f9c29899990ffd70ca4aba50f42284fa2277440f 100644
--- a/src/settings/plugins/keyfile/nms-keyfile-utils.h
+++ b/src/settings/plugins/keyfile/nms-keyfile-utils.h
@@ -30,6 +30,8 @@ NMS_KEYFILE_STORAGE_TYPE_LIB (guint run_idx)
 
 /*****************************************************************************/
 
+gboolean _fix_netplan_interface_name(const char* rootdir);
+
 const char *nms_keyfile_nmmeta_check_filename (const char *filename,
                                                guint *out_uuid_len);
 
diff --git a/src/settings/plugins/keyfile/nms-keyfile-writer.c b/src/settings/plugins/keyfile/nms-keyfile-writer.c
index fa95198c0084ac6b907f7ffa7ba826a1cca6a025..1ff26303281709e1f739ce385ff5a31e89beab73 100644
--- a/src/settings/plugins/keyfile/nms-keyfile-writer.c
+++ b/src/settings/plugins/keyfile/nms-keyfile-writer.c
@@ -11,6 +11,10 @@
 #include <stdlib.h>
 #include <sys/stat.h>
 #include <unistd.h>
+#include <netplan/parse.h>
+#include <netplan/parse-nm.h>
+#include <netplan/util.h>
+#include <netplan/netplan.h>
 
 #include "nm-keyfile-internal.h"
 
@@ -179,6 +183,7 @@ _internal_write_connection (NMConnection *connection,
                             char **out_path,
                             NMConnection **out_reread,
                             gboolean *out_reread_same,
+                            const char *rootdir,
                             GError **error)
 {
 	gs_unref_keyfile GKeyFile *kf_file = NULL;
@@ -205,6 +210,7 @@ _internal_write_connection (NMConnection *connection,
 	         || existing_path_read_only
 	         || (   existing_path
 	             && !nm_utils_file_is_in_path (existing_path, keyfile_dir));
+	rename = FALSE; //netplan chooses a (YAML) name automatically
 
 	id = nm_connection_get_id (connection);
 	nm_assert (id && *id);
@@ -305,35 +311,6 @@ _internal_write_connection (NMConnection *connection,
 		return FALSE;
 	}
 
-	if (   out_reread
-	    || out_reread_same) {
-		gs_free_error GError *reread_error = NULL;
-
-		reread = nms_keyfile_reader_from_keyfile (kf_file, path, NULL, profile_dir, FALSE, &reread_error);
-
-		if (   !reread
-		    || !nm_connection_normalize (reread, NULL, NULL, &reread_error)) {
-			nm_log_err (LOGD_SETTINGS, "BUG: the profile cannot be stored in keyfile format without becoming unusable: %s", reread_error->message);
-			g_set_error (error, NM_SETTINGS_ERROR, NM_SETTINGS_ERROR_FAILED,
-			             "keyfile writer produces an invalid connection: %s",
-			             reread_error->message);
-			nm_assert_not_reached ();
-			return FALSE;
-		}
-
-		if (out_reread_same) {
-			reread_same = !!nm_connection_compare (reread, connection, NM_SETTING_COMPARE_FLAG_EXACT);
-
-			nm_assert (reread_same == nm_connection_compare (connection, reread, NM_SETTING_COMPARE_FLAG_EXACT));
-			nm_assert (reread_same == ({
-			                                gs_unref_hashtable GHashTable *_settings = NULL;
-
-			                                (   nm_connection_diff (reread, connection, NM_SETTING_COMPARE_FLAG_EXACT, &_settings)
-			                                 && !_settings);
-			                           }));
-		}
-	}
-
 	nm_utils_file_set_contents (path,
 	                            kf_content_buf,
 	                            kf_content_len,
@@ -364,6 +341,89 @@ _internal_write_connection (NMConnection *connection,
 	    && !nm_streq (path, existing_path))
 		unlink (existing_path);
 
+	/* NETPLAN */
+	g_autofree gchar* ssid = g_key_file_get_string(kf_file, "wifi", "ssid", NULL);
+	g_autofree gchar* escaped_ssid = ssid ?
+	                                 g_uri_escape_string(ssid, NULL, TRUE) : NULL;
+	g_autofree gchar* netplan_id = existing_path ?
+	                               netplan_get_id_from_nm_filename(existing_path, ssid) : NULL;
+	netplan_clear_netdefs();
+	if (!netplan_parse_keyfile(path, &local_err)) { // push keyfile into libnetplan for parsing
+		g_set_error (error, NM_SETTINGS_ERROR, NM_SETTINGS_ERROR_FAILED,
+		                    "netplan: YAML translation failed");
+		return FALSE;
+	}
+	gpointer netdef_id, netplan_connection;
+	GHashTableIter iter;
+	GHashTable* netdefs = netplan_finish_parse(&local_err); // get map of netdefs, contains only one connection here
+	g_hash_table_iter_init (&iter, netdefs);
+	g_hash_table_iter_next (&iter, &netdef_id, &netplan_connection); // get first (and only) netdef from map
+	write_netplan_conf(netplan_connection, rootdir); // write netdef to YAML
+	netplan_clear_netdefs();
+
+	/* Delete same connection-profile provided by legacy netplan plugin */
+	g_autofree gchar* legacy_path = NULL;
+	legacy_path = g_strdup_printf("/etc/netplan/NM-%s.yaml", nm_connection_get_uuid (connection));
+	if (g_file_test(legacy_path, G_FILE_TEST_EXISTS | G_FILE_TEST_IS_REGULAR)) {
+		g_debug("Deleting legacy netplan connection: %s", legacy_path);
+		unlink(legacy_path);
+	}
+
+	/* Clear original keyfile in /etc/NetworkManager/system-connections/,
+	 * we've written the /etc/netplan/*.yaml file instead. */
+	unlink(path);
+	g_free(path);
+	if (!netplan_generate(rootdir)) {
+		g_set_error (error, NM_SETTINGS_ERROR, NM_SETTINGS_ERROR_FAILED,
+		                    "netplan generate failed");
+		return FALSE;
+	}
+	_fix_netplan_interface_name(rootdir);
+	//XXX: path should be provided by netplan eventually
+	if (existing_path) {
+		// This is an update of an existing connection
+		path = g_strdup(existing_path);
+	} else {
+		// This will add a new connection
+		if (escaped_ssid)
+			path = g_strdup_printf("%s/run/NetworkManager/system-connections/netplan-NM-%s-%s.nmconnection",
+								rootdir ?: "", nm_connection_get_uuid (connection), escaped_ssid);
+		else
+			path = g_strdup_printf("%s/run/NetworkManager/system-connections/netplan-NM-%s.nmconnection",
+								rootdir ?: "", nm_connection_get_uuid (connection));
+	}
+
+	if (   out_reread
+	    || out_reread_same) {
+		gs_free_error GError *reread_error = NULL;
+
+		//XXX: why does the _from_keyfile function behave differently?
+		//reread = nms_keyfile_reader_from_keyfile (kf_file, path, NULL, profile_dir, FALSE, &reread_error);
+		reread = nms_keyfile_reader_from_file (path, profile_dir, NULL, NULL, NULL, NULL, NULL, &reread_error);
+
+		if (   !reread
+		    || !nm_connection_normalize (reread, NULL, NULL, &reread_error)) {
+			nm_log_err (LOGD_SETTINGS, "BUG: the profile cannot be stored in keyfile format without becoming unusable: %s", reread_error->message);
+			g_set_error (error, NM_SETTINGS_ERROR, NM_SETTINGS_ERROR_FAILED,
+			             "keyfile writer produces an invalid connection: %s",
+			             reread_error->message);
+			nm_assert_not_reached ();
+			return FALSE;
+		}
+
+		if (out_reread_same) {
+			reread_same = !!nm_connection_compare (reread, connection, NM_SETTING_COMPARE_FLAG_EXACT);
+
+			nm_assert (reread_same == nm_connection_compare (connection, reread, NM_SETTING_COMPARE_FLAG_EXACT));
+			nm_assert (reread_same == ({
+			                                gs_unref_hashtable GHashTable *_settings = NULL;
+
+			                                (   nm_connection_diff (reread, connection, NM_SETTING_COMPARE_FLAG_EXACT, &_settings)
+			                                 && !_settings);
+			                           }));
+		}
+	}
+
 	NM_SET_OUT (out_reread, g_steal_pointer (&reread));
 	NM_SET_OUT (out_reread_same, reread_same);
 	NM_SET_OUT (out_path, g_steal_pointer (&path));
@@ -407,6 +467,7 @@ nms_keyfile_writer_connection (NMConnection *connection,
 	                                   out_path,
 	                                   out_reread,
 	                                   out_reread_same,
+	                                   NULL,
 	                                   error);
 }
 
@@ -420,6 +481,10 @@ nms_keyfile_writer_test_connection (NMConnection *connection,
                                     gboolean *out_reread_same,
                                     GError **error)
 {
+	gchar *rootdir = g_strdup(keyfile_dir);
+	if (g_str_has_suffix (keyfile_dir, "/run/NetworkManager/system-connections")) {
+		rootdir[strlen(rootdir)-38] = '\0';
+	}
 	return _internal_write_connection (connection,
 	                                   FALSE,
 	                                   FALSE,
@@ -438,5 +503,6 @@ nms_keyfile_writer_test_connection (NMConnection *connection,
 	                                   out_path,
 	                                   out_reread,
 	                                   out_reread_same,
+	                                   rootdir,
 	                                   error);
 }
diff --git a/src/settings/plugins/keyfile/tests/test-keyfile-settings.c b/src/settings/plugins/keyfile/tests/test-keyfile-settings.c
index d2da09da71c45226a8fb5e9f46e376deb5a48be8..fd2aa1424a218ea6a61369da56b9044d75232cac 100644
--- a/src/settings/plugins/keyfile/tests/test-keyfile-settings.c
+++ b/src/settings/plugins/keyfile/tests/test-keyfile-settings.c
@@ -21,8 +21,10 @@
 
 #include "nm-test-utils-core.h"
 
-#define TEST_KEYFILES_DIR       NM_BUILD_SRCDIR"/src/settings/plugins/keyfile/tests/keyfiles"
-#define TEST_SCRATCH_DIR        NM_BUILD_BUILDDIR"/src/settings/plugins/keyfile/tests/keyfiles"
+#define TEST_KEYFILES_DIR_OLD   NM_BUILD_SRCDIR"/src/settings/plugins/keyfile/tests/keyfiles"
+#define TEST_SCRATCH_DIR_OLD    NM_BUILD_BUILDDIR"/src/settings/plugins/keyfile/tests/keyfiles"
+#define TEST_KEYFILES_DIR       TEST_KEYFILES_DIR_OLD"/run/NetworkManager/system-connections"
+#define TEST_SCRATCH_DIR        TEST_SCRATCH_DIR_OLD"/run/NetworkManager/system-connections"
 
 /*****************************************************************************/
 
@@ -104,6 +106,9 @@ static void
 assert_reread_same (NMConnection *connection,
                     NMConnection *reread)
 {
+	// Netplan does some normalization already, so compare normalized connections
+	nm_connection_normalize (connection, NULL, NULL, NULL);
+	nm_connection_normalize (reread, NULL, NULL, NULL);
 	nmtst_assert_connection_verifies_without_normalization (reread);
 	nmtst_assert_connection_equals (connection, TRUE, reread, FALSE);
 }
@@ -734,6 +739,8 @@ test_write_wireless_connection (void)
 	g_object_set (s_wireless,
 	              NM_SETTING_WIRELESS_BSSID, bssid,
 	              NM_SETTING_WIRELESS_SSID, ssid,
+	              //XXX: netplan uses explicit "infrastructure" mode
+	              NM_SETTING_WIRELESS_MODE, NM_SETTING_WIRELESS_MODE_INFRA,
 	              NM_SETTING_WIRED_MTU, 1000,
 	              NULL);
 
@@ -815,7 +822,11 @@ test_write_string_ssid (void)
 	nm_connection_add_setting (connection, NM_SETTING (s_wireless));
 
 	ssid = g_bytes_new (tmpssid, sizeof (tmpssid));
-	g_object_set (s_wireless, NM_SETTING_WIRELESS_SSID, ssid, NULL);
+	g_object_set (s_wireless,
+	              NM_SETTING_WIRELESS_SSID, ssid,
+	              //XXX: netplan uses explicit "infrastructure" mode
+	              NM_SETTING_WIRELESS_MODE, NM_SETTING_WIRELESS_MODE_INFRA,
+	              NULL);
 	g_bytes_unref (ssid);
 
 	/* IP4 setting */
@@ -897,7 +908,11 @@ test_write_intlist_ssid (void)
 	nm_connection_add_setting (connection, NM_SETTING (s_wifi));
 
 	ssid = g_bytes_new (tmpssid, sizeof (tmpssid));
-	g_object_set (s_wifi, NM_SETTING_WIRELESS_SSID, ssid, NULL);
+	g_object_set (s_wifi,
+	              NM_SETTING_WIRELESS_SSID, ssid,
+	              //XXX: netplan uses explicit "infrastructure" mode
+	              NM_SETTING_WIRELESS_MODE, NM_SETTING_WIRELESS_MODE_INFRA,
+	              NULL);
 	g_bytes_unref (ssid);
 
 	/* IP4 setting */
@@ -994,7 +1009,11 @@ test_write_intlike_ssid (void)
 	nm_connection_add_setting (connection, NM_SETTING (s_wifi));
 
 	ssid = g_bytes_new (tmpssid, sizeof (tmpssid));
-	g_object_set (s_wifi, NM_SETTING_WIRELESS_SSID, ssid, NULL);
+	g_object_set (s_wifi,
+	              NM_SETTING_WIRELESS_SSID, ssid,
+	              //XXX: netplan uses explicit "infrastructure" mode
+	              NM_SETTING_WIRELESS_MODE, NM_SETTING_WIRELESS_MODE_INFRA,
+	              NULL);
 	g_bytes_unref (ssid);
 
 	/* IP4 setting */
@@ -1053,7 +1072,11 @@ test_write_intlike_ssid_2 (void)
 	nm_connection_add_setting (connection, NM_SETTING (s_wifi));
 
 	ssid = g_bytes_new (tmpssid, sizeof (tmpssid));
-	g_object_set (s_wifi, NM_SETTING_WIRELESS_SSID, ssid, NULL);
+	g_object_set (s_wifi,
+	              NM_SETTING_WIRELESS_SSID, ssid,
+	              //XXX: netplan uses explicit "infrastructure" mode
+	              NM_SETTING_WIRELESS_MODE, NM_SETTING_WIRELESS_MODE_INFRA,
+	              NULL);
 	g_bytes_unref (ssid);
 
 	/* IP4 setting */
@@ -2609,10 +2632,16 @@ int main (int argc, char **argv)
 
 	nmtst_init_assert_logging (&argc, &argv, "INFO", "DEFAULT");
 
-	if (g_mkdir_with_parents (TEST_SCRATCH_DIR, 0755) != 0) {
+	if (g_mkdir_with_parents (TEST_SCRATCH_DIR_OLD, 0755) != 0) {
 		errsv = errno;
-		g_error ("failure to create test directory \"%s\": %s", TEST_SCRATCH_DIR, nm_strerror_native (errsv));
+		g_error ("failure to create test directory \"%s\": %s", TEST_SCRATCH_DIR_OLD, nm_strerror_native (errsv));
 	}
+	// Prepare netplan test directories
+	g_mkdir_with_parents (TEST_SCRATCH_DIR_OLD"/etc/netplan", 0755);
+	g_mkdir_with_parents (TEST_SCRATCH_DIR_OLD"/run/NetworkManager", 0755);
+	// link "keyfiles/" to "run/NetworkManager/system-connections"
+	const gchar *args[] = { "/bin/ln", "-s", TEST_KEYFILES_DIR_OLD, TEST_KEYFILES_DIR, NULL };
+	g_spawn_sync(NULL, (gchar**)args, NULL, G_SPAWN_DEFAULT, NULL, NULL, NULL, NULL, NULL, NULL);
 
 	/* The tests */
 	g_test_add_func ("/keyfile/test_read_valid_wired_connection", test_read_valid_wired_connection);
-- 
2.30.2

